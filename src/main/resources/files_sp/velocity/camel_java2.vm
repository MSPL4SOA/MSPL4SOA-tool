package $javaCamelRouterPkg;

import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.apache.camel.builder.RouteBuilder;
import javax.inject.Inject;

import $statePkg#[[.]]#*;


public class $camelRouterJMSName extends RouteBuilder {
#set ($stateInstance = "instance")

#foreach($capability in $service.capabilities)
#if($capability.stateMessaging == true)
	@Inject
	$capability.stateClassName $stateInstance$capability.stateClassName;
#end
#end


#set ($conditionMethod = "#[[$]]#{in.header.$SERVICE_NAME} =~ '$service.interfaceName' and (")
#foreach($capability in $service.capabilities)

#set ($conditionMethod = $conditionMethod + "#[[$]]#{in.header.$METHOD_NAME} =~ '$capability.name'")	
	
#if($foreach.count < $capability.inputs.size())
#set ($conditionMethod = $conditionMethod + " or ")
		
#end
#end
#set ($conditionMethod = $conditionMethod + ")")

	/**
	 * The Camel route is configured via this method.  The from endpoint is required to be a SwitchYard service.
	 */
	public void configure() {
		// TODO Auto-generated method stub
		from("switchyard://$camelRouterInterfaceName").log("Received message for '$camelRouterInterfaceName' : #[[$]]#{body}")
		.choice().when().simple("$conditionMethod")
		.recipientList(simple("switchyard://#[[$]]#{in.header.$SERVICE_NAME}?operationName=#[[$]]#{in.header.$METHOD_NAME}"))
		.process(new Processor() {
			public void process(Exchange exchange) throws Exception {
				
				
				#foreach($capability in $service.capabilities)
				#if($capability.stateMessaging == true)
				#set ($stateCapabilityInstance = $stateInstance + $capability.stateClassName)
				
				if#[[(]]#exchange.getIn().getHeader("$METHOD_NAME")#[[.]]#equals#[[(]]#"$capability.name"))
				exchange.getOut().setHeader("$STATE_HEADER_NAME", $stateCapabilityInstance#[[.]]#getState#[[(]]#));
					#if($capability.statefullService == false)
					$stateCapabilityInstance#[[.]]#setState#[[(]]#null);
					#end
				#end
				#end
			}
		});
	}

}
