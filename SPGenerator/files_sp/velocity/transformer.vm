package $transfromerPkg;

import org.switchyard.annotations.Transformer;
import org.w3c.dom.Element;

import $XMLSOAPTransformersFilePkg;

#foreach($capability in $service.capabilities)
#if($capability.inputs.size() != 0)
import $inputDataPkg#[[.]]#$capability.dataInputClassName;
#end
#end

#foreach($capability in $service.capabilities)
#if($capability.outputs.size() != 0)
import $outputDataPkg#[[.]]#$capability.dataOutputClassName;
#end
#end

public final class Transformers$service.interfaceName {

#foreach($capability in $service.capabilities)
#set ($capabilityResponse = $capability.name + "Response")

	#if($capability.outputs.size() != 0)
	@Transformer(to = "{$namespace}$capabilityResponse")
	public Element transform$capability.dataOutputClassName#[[]]#To$capabilityResponse#[[(]]#$capability.dataOutputClassName from) {
	
	StringBuffer resultXml = new StringBuffer()
				.append("<$capability.dataOutputClassName:$capabilityResponse xmlns:$capability.dataOutputClassName=\"$namespace\">")
				.append("<return>")
				#foreach($output in $capability.outputs)
				.append("<$output.name>" + from.get$output.name.substring(0,1).toUpperCase()$output.name.substring(1)() + "</$output.name>")
				#end
				.append("</return>")
				.append("</$capability.dataOutputClassName:$capabilityResponse>");

		return $XMLSOAPTransformersFileName#[[.]]#toElement(resultXml.toString());
	
	}
	#end
	
	
	#if($capability.inputs.size() != 0)
	@Transformer(from = "{$namespace}$capability.name")
	public $capability.dataInputClassName transform$capability.name#[[]]#To$capability.dataInputClassName#[[(]]#Element from) {
	
	$capability.dataInputClassName in = new $capability.dataInputClassName#[[(]]#);

		#foreach($input in $capability.inputs)
	    in.set$input.name.substring(0,1).toUpperCase()$input.name.substring(1)($input.type#[[.]]#valueOf#[[(]]#$XMLSOAPTransformersFileName#[[.]]#getElementValue#[[(]]#from, "$input.name")));
		#end
				

		return in;
	
	}
	#end
#end
}